{
  "address": "0xf98ac456e70133bEb29D8cCA0449F40ceB75f58d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "control_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "bn254_control_id",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "received",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "expected",
          "type": "bytes4"
        }
      ],
      "name": "SelectorMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BN254_CONTROL_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONTROL_ROOT_0",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONTROL_ROOT_1",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "seal",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "imageId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "journalDigest",
          "type": "bytes32"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "seal",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "claimDigest",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "verifyIntegrity",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[5]",
          "name": "_pubSignals",
          "type": "uint256[5]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d238d5b9d3bb5b29036ec373d0fbb9ed934806cd473e9f7067cd4895a4f0b69",
  "receipt": {
    "to": null,
    "from": "0x11A083ead9814a6D5DbB1929574672A185f79504",
    "contractAddress": "0xf98ac456e70133bEb29D8cCA0449F40ceB75f58d",
    "transactionIndex": 1,
    "gasUsed": "1227496",
    "logsBloom": "0x
    "blockHash": "0x562397fdbdb6f1fe4232782dafe3493a64a484f07da8618e4a62373fc78a3fbe",
    "transactionHash": "0x9d238d5b9d3bb5b29036ec373d0fbb9ed934806cd473e9f7067cd4895a4f0b69",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9435776,
        "transactionHash": "0x9d238d5b9d3bb5b29036ec373d0fbb9ed934806cd473e9f7067cd4895a4f0b69",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000011a083ead9814a6d5dbb1929574672a185f79504",
          "0x0000000000000000000000004ca9ff871c7aa1e7b64e1eae110835f68d6a0bd4"
        ],
        "data": "0x000000000000000000000000000000000000000000000000057b4bebf61420b8000000000000000000000000000000000000000000000003be94e131c6266c970000000000000000000000000000000000000000000002683848424a92882b8e000000000000000000000000000000000000000000000003b9199545d0124bdf0000000000000000000000000000000000000000000002683dc38e36889c4c46",
        "logIndex": 2,
        "blockHash": "0x562397fdbdb6f1fe4232782dafe3493a64a484f07da8618e4a62373fc78a3fbe"
      }
    ],
    "blockNumber": 9435776,
    "cumulativeGasUsed": "1272555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0de344ee9c81b8ebdd6e7d48632403cd5760478d86c9936731162bd90d35b38",
    "0x93b5d43a379e178e8e3fafbbd6830f2e87a26e94b917aa71408c8bfbfad292ae"
  ],
  "numDeployments": 1,
  "solcInputHash": "bb144e332bbbd5fcc9c9a05ecc7d3c99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"control_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bn254_control_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"received\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"expected\",\"type\":\"bytes4\"}],\"name\":\"SelectorMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BN254_CONTROL_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTROL_ROOT_0\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTROL_ROOT_1\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"imageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"journalDigest\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"claimDigest\",\"type\":\"bytes32\"}],\"internalType\":\"struct Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"verifyIntegrity\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_pubSignals\",\"type\":\"uint256[5]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{\"verify(bytes,bytes32,bytes32)\":{\"details\":\"This method additionally ensures that the input hash is all-zeros (i.e. no committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the receipt is unconditional).\",\"params\":{\"imageId\":\"The identifier for the guest program.\",\"journalDigest\":\"The SHA-256 digest of the journal bytes.\",\"seal\":\"The encoded cryptographic proof (i.e. SNARK).\"}},\"verifyIntegrity((bytes,bytes32))\":{\"params\":{\"receipt\":\"The receipt to be verified.\"}}},\"stateVariables\":{\"CONTROL_ROOT_0\":{\"details\":\"This value controls what set of recursion programs (e.g. lift, join, resolve), and therefore what version of the zkVM circuit, will be accepted by this contract. Each instance of this verifier contract will accept a single release of the RISC Zero circuits. New releases of RISC Zero's zkVM require updating these values. These values can be calculated from the [risc0 monorepo][1] using: `cargo xtask bootstrap`. [1]: https://github.com/risc0/risc0\"},\"SELECTOR\":{\"details\":\"The selector is taken from the hash of the verifier parameters including the Groth16      verification key and the control IDs that commit to the RISC Zero circuits. If two      receipts have different selectors (i.e. different verifier parameters), then it can      generally be assumed that they need distinct verifier implementations. This is used as      part of the RISC Zero versioning mechanism.      A selector is not intended to be collision resistant, in that it is possible to find      two preimages that result in the same selector. This is acceptable since it's purpose      to a route a request among a set of trusted verifiers, and to make errors of sending a      receipt to a mismatching verifiers easier to debug. It is analogous to the ABI      function selectors.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"SelectorMismatch(bytes4,bytes4)\":[{\"notice\":\"Error raised when this verifier receives a receipt with a selector that does not match         its own. The selector value is calculated from the verifier parameters, and so this         usually indicates a mismatch between the version of the prover and this verifier.\"}],\"VerificationFailed()\":[{\"notice\":\"Error raised when cryptographic verification of the zero-knowledge proof fails.\"}]},\"kind\":\"user\",\"methods\":{\"CONTROL_ROOT_0()\":{\"notice\":\"Control root hash binding the set of circuits in the RISC Zero system.\"},\"SELECTOR()\":{\"notice\":\"A short key attached to the seal to select the correct verifier implementation.\"},\"verify(bytes,bytes32,bytes32)\":{\"notice\":\"Verify that the given seal is a valid RISC Zero proof of execution with the     given image ID and journal digest. Reverts on failure.\"},\"verifyIntegrity((bytes,bytes32))\":{\"notice\":\"Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is valid a cryptographic proof of the execution with the given `claim`. Reverts on failure.\"}},\"notice\":\"Groth16 verifier contract for RISC Zero receipts of execution.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/groth16/RiscZeroGroth16Verifier.sol\":\"RiscZeroGroth16Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"contracts/StructHash.sol\":{\"content\":\"// Copyright 2024 RISC Zero, Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n//\\n// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.9;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { reverseByteOrderUint16 } from \\\"./Util.sol\\\";\\n\\n/// @notice Structural hashing routines used for RISC Zero data structures.\\n/// @dev\\n/// StructHash implements hashing for structs, incorporating type tags for domain separation.\\n/// The goals of this library are:\\n/// * Collision resistance: it should not be possible to find two semantically distinct values that\\n///   produce the same digest.\\n/// * Simplicity: implementations should be simple to understand and write, as these methods must\\n///   be implemented in multiple languages and environments, including zkSNARK circuits.\\n/// * Incremental openings: it should be possible to incrementally open a nested struct without\\n///   needing to open (very many) extra fields (i.e. the struct should be \\\"Merkle-ized\\\").\\nlibrary StructHash {\\n    using SafeCast for uint256;\\n\\n    // @notice Compute the struct digest with the given tag digest and digest fields down.\\n    function taggedStruct(bytes32 tagDigest, bytes32[] memory down) internal pure returns (bytes32) {\\n        bytes memory data = new bytes(0);\\n        return taggedStruct(tagDigest, down, data);\\n    }\\n\\n    // @notice Compute the struct digest with the given tag digest, digest fields down, and data.\\n    function taggedStruct(bytes32 tagDigest, bytes32[] memory down, bytes memory data) internal pure returns (bytes32) {\\n        uint16 downLen = down.length.toUint16();\\n        // swap the byte order to encode as little-endian.\\n        bytes2 downLenLE = bytes2((downLen << 8) | (downLen >> 8));\\n        return sha256(abi.encodePacked(tagDigest, down, data, downLenLE));\\n    }\\n\\n    // @notice Add an element (head) to the incremental hash of a list (tail).\\n    function taggedListCons(bytes32 tagDigest, bytes32 head, bytes32 tail) internal pure returns (bytes32) {\\n        bytes32[] memory down = new bytes32[](2);\\n        down[0] = head;\\n        down[1] = tail;\\n        return taggedStruct(tagDigest, down);\\n    }\\n\\n    // @notice Hash the list by using taggedListCons to repeatedly add to the head of the list.\\n    function taggedList(bytes32 tagDigest, bytes32[] memory list) internal pure returns (bytes32) {\\n        bytes32 curr = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);\\n        for (uint256 i = 0; i < list.length; i++) {\\n            curr = taggedListCons(tagDigest, list[list.length - 1 - i], curr);\\n        }\\n        return curr;\\n    }\\n}\\n\",\"keccak256\":\"0x1c85a62f3acd84b4b3f381d2451576382166ae0adbfb573887325ad12722e8ab\",\"license\":\"Apache-2.0\"},\"contracts/Util.sol\":{\"content\":\"// Copyright 2024 RISC Zero, Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n//\\n// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.9;\\n\\n/// @notice reverse the byte order of the uint256 value.\\n/// @dev Solidity uses a big-endian ABI encoding. Reversing the byte order before encoding\\n/// ensure that the encoded value will be little-endian.\\n/// Written by k06a. https://ethereum.stackexchange.com/a/83627\\nfunction reverseByteOrderUint256(uint256 input) pure returns (uint256 v) {\\n    v = input;\\n\\n    // swap bytes\\n    v =\\n        ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n    // swap 2-byte long pairs\\n    v =\\n        ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n    // swap 4-byte long pairs\\n    v =\\n        ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n    // swap 8-byte long pairs\\n    v =\\n        ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n}\\n\\n/// @notice reverse the byte order of the uint32 value.\\n/// @dev Solidity uses a big-endian ABI encoding. Reversing the byte order before encoding\\n/// ensure that the encoded value will be little-endian.\\n/// Written by k06a. https://ethereum.stackexchange.com/a/83627\\nfunction reverseByteOrderUint32(uint32 input) pure returns (uint32 v) {\\n    v = input;\\n\\n    // swap bytes\\n    v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n    // swap 2-byte long pairs\\n    v = (v >> 16) | (v << 16);\\n}\\n\\n/// @notice reverse the byte order of the uint16 value.\\n/// @dev Solidity uses a big-endian ABI encoding. Reversing the byte order before encoding\\n/// ensure that the encoded value will be little-endian.\\n/// Written by k06a. https://ethereum.stackexchange.com/a/83627\\nfunction reverseByteOrderUint16(uint16 input) pure returns (uint16 v) {\\n    v = input;\\n\\n    // swap bytes\\n    v = (v >> 8) | ((v & 0x00FF) << 8);\\n}\\n\",\"keccak256\":\"0x0fb63bef2b8dfdd6b2b29201381c64b1cb6cd27d91e5f173abe6702d7a5e30bc\",\"license\":\"Apache-2.0\"},\"contracts/groth16/ControlID.sol\":{\"content\":\"// Copyright 2024 RISC Zero, Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n//\\n// SPDX-License-Identifier: Apache-2.0\\n\\n// This file is automatically generated by:\\n// cargo xtask bootstrap-groth16\\n\\npragma solidity ^0.8.9;\\n\\nlibrary ControlID {\\n    bytes32 public constant CONTROL_ROOT = hex\\\"a516a057c9fbf5629106300934d48e0e775d4230e41e503347cad96fcbde7e2e\\\";\\n    // NOTE: This has opposite byte order to the value in the risc0 repository.\\n    bytes32 public constant BN254_CONTROL_ID = hex\\\"0eb6febcf06c5df079111be116f79bd8c7e85dc9448776ef9a59aaf2624ab551\\\";\\n}\\n\",\"keccak256\":\"0x212664d748295ec334f62528cb9f14501c87b367b5e46549311904af2ff5fb9c\",\"license\":\"Apache-2.0\"},\"contracts/groth16/Groth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1 = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2 = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1 = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2 = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 1668323501672964604911431804142266013250380587483576094566949227275849579036;\\n    uint256 constant deltax2 = 12043754404802191763554326994664886008979042643626290185762540825416902247219;\\n    uint256 constant deltay1 = 7710631539206257456743780535472368339139328733484942210876916214502466455394;\\n    uint256 constant deltay2 = 13740680757317479711909903993315946540841369848973133181051452051592786724563;\\n\\n    uint256 constant IC0x = 8446592859352799428420270221449902464741693648963397251242447530457567083492;\\n    uint256 constant IC0y = 1064796367193003797175961162477173481551615790032213185848276823815288302804;\\n\\n    uint256 constant IC1x = 3179835575189816632597428042194253779818690147323192973511715175294048485951;\\n    uint256 constant IC1y = 20895841676865356752879376687052266198216014795822152491318012491767775979074;\\n\\n    uint256 constant IC2x = 5332723250224941161709478398807683311971555792614491788690328996478511465287;\\n    uint256 constant IC2y = 21199491073419440416471372042641226693637837098357067793586556692319371762571;\\n\\n    uint256 constant IC3x = 12457994489566736295787256452575216703923664299075106359829199968023158780583;\\n    uint256 constant IC3y = 19706766271952591897761291684837117091856807401404423804318744964752784280790;\\n\\n    uint256 constant IC4x = 19617808913178163826953378459323299110911217259216006187355745713323154132237;\\n    uint256 constant IC4y = 21663537384585072695701846972542344484111393047775983928357046779215877070466;\\n\\n    uint256 constant IC5x = 6834578911681792552110317589222010969491336870276623105249474534788043166867;\\n    uint256 constant IC5y = 15060583660288623605191393599883223885678013570733629274538391874953353488393;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint256[2] calldata _pA,\\n        uint256[2][2] calldata _pB,\\n        uint256[2] calldata _pC,\\n        uint256[5] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n\\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            checkField(calldataload(add(_pubSignals, 64)))\\n\\n            checkField(calldataload(add(_pubSignals, 96)))\\n\\n            checkField(calldataload(add(_pubSignals, 128)))\\n\\n            checkField(calldataload(add(_pubSignals, 160)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaadc5747c8c88bba828e692020e880ef31d38964d3e419099e3d3a194312ea62\",\"license\":\"GPL-3.0\"},\"contracts/groth16/RiscZeroGroth16Verifier.sol\":{\"content\":\"// Copyright 2024 RISC Zero, Inc.\\n//\\n// The RiscZeroGroth16Verifier is a free software: you can redistribute it\\n// and/or modify it under the terms of the GNU General Public License as\\n// published by the Free Software Foundation, either version 3 of the License,\\n// or (at your option) any later version.\\n//\\n// The RiscZeroGroth16Verifier is distributed in the hope that it will be\\n// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\\n// Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License along with\\n// the RiscZeroGroth16Verifier. If not, see <https://www.gnu.org/licenses/>.\\n//\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ControlID } from \\\"./ControlID.sol\\\";\\nimport { Groth16Verifier } from \\\"./Groth16Verifier.sol\\\";\\nimport { ExitCode, IRiscZeroVerifier, Output, OutputLib, Receipt, ReceiptClaim, ReceiptClaimLib, SystemExitCode, VerificationFailed } from \\\"../interfaces/IRiscZeroVerifier.sol\\\";\\nimport { StructHash } from \\\"../StructHash.sol\\\";\\nimport { reverseByteOrderUint256, reverseByteOrderUint32 } from \\\"../Util.sol\\\";\\n\\n/// @notice A Groth16 seal over the claimed receipt claim.\\nstruct Seal {\\n    uint256[2] a;\\n    uint256[2][2] b;\\n    uint256[2] c;\\n}\\n\\n/// @notice Error raised when this verifier receives a receipt with a selector that does not match\\n///         its own. The selector value is calculated from the verifier parameters, and so this\\n///         usually indicates a mismatch between the version of the prover and this verifier.\\nerror SelectorMismatch(bytes4 received, bytes4 expected);\\n\\n/// @notice Groth16 verifier contract for RISC Zero receipts of execution.\\ncontract RiscZeroGroth16Verifier is IRiscZeroVerifier, Groth16Verifier {\\n    using ReceiptClaimLib for ReceiptClaim;\\n    using OutputLib for Output;\\n    using SafeCast for uint256;\\n\\n    /// @notice Control root hash binding the set of circuits in the RISC Zero system.\\n    /// @dev This value controls what set of recursion programs (e.g. lift, join, resolve), and\\n    /// therefore what version of the zkVM circuit, will be accepted by this contract. Each\\n    /// instance of this verifier contract will accept a single release of the RISC Zero circuits.\\n    ///\\n    /// New releases of RISC Zero's zkVM require updating these values. These values can be\\n    /// calculated from the [risc0 monorepo][1] using: `cargo xtask bootstrap`.\\n    ///\\n    /// [1]: https://github.com/risc0/risc0\\n    bytes16 public immutable CONTROL_ROOT_0;\\n    bytes16 public immutable CONTROL_ROOT_1;\\n    bytes32 public immutable BN254_CONTROL_ID;\\n\\n    /// @notice A short key attached to the seal to select the correct verifier implementation.\\n    /// @dev The selector is taken from the hash of the verifier parameters including the Groth16\\n    ///      verification key and the control IDs that commit to the RISC Zero circuits. If two\\n    ///      receipts have different selectors (i.e. different verifier parameters), then it can\\n    ///      generally be assumed that they need distinct verifier implementations. This is used as\\n    ///      part of the RISC Zero versioning mechanism.\\n    ///\\n    ///      A selector is not intended to be collision resistant, in that it is possible to find\\n    ///      two preimages that result in the same selector. This is acceptable since it's purpose\\n    ///      to a route a request among a set of trusted verifiers, and to make errors of sending a\\n    ///      receipt to a mismatching verifiers easier to debug. It is analogous to the ABI\\n    ///      function selectors.\\n    bytes4 public immutable SELECTOR;\\n\\n    /// @notice Identifier for the Groth16 verification key encoded into the base contract.\\n    /// @dev This value is computed at compile time.\\n    function verifier_key_digest() internal pure returns (bytes32) {\\n        bytes32[] memory ic_digests = new bytes32[](6);\\n        ic_digests[0] = sha256(abi.encodePacked(IC0x, IC0y));\\n        ic_digests[1] = sha256(abi.encodePacked(IC1x, IC1y));\\n        ic_digests[2] = sha256(abi.encodePacked(IC2x, IC2y));\\n        ic_digests[3] = sha256(abi.encodePacked(IC3x, IC3y));\\n        ic_digests[4] = sha256(abi.encodePacked(IC4x, IC4y));\\n        ic_digests[5] = sha256(abi.encodePacked(IC5x, IC5y));\\n\\n        return\\n            sha256(\\n                abi.encodePacked(\\n                    // tag\\n                    sha256(\\\"risc0_groth16.VerifyingKey\\\"),\\n                    // down\\n                    sha256(abi.encodePacked(alphax, alphay)),\\n                    sha256(abi.encodePacked(betax1, betax2, betay1, betay2)),\\n                    sha256(abi.encodePacked(gammax1, gammax2, gammay1, gammay2)),\\n                    sha256(abi.encodePacked(deltax1, deltax2, deltay1, deltay2)),\\n                    StructHash.taggedList(sha256(\\\"risc0_groth16.VerifyingKey.IC\\\"), ic_digests),\\n                    // down length\\n                    uint16(5) << 8\\n                )\\n            );\\n    }\\n\\n    constructor(bytes32 control_root, bytes32 bn254_control_id) {\\n        (CONTROL_ROOT_0, CONTROL_ROOT_1) = splitDigest(control_root);\\n        BN254_CONTROL_ID = bn254_control_id;\\n\\n        SELECTOR = bytes4(\\n            sha256(\\n                abi.encodePacked(\\n                    // tag\\n                    sha256(\\\"risc0.Groth16ReceiptVerifierParameters\\\"),\\n                    // down\\n                    control_root,\\n                    reverseByteOrderUint256(uint256(bn254_control_id)),\\n                    verifier_key_digest(),\\n                    // down length\\n                    uint16(3) << 8\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice splits a digest into two 128-bit halves to use as public signal inputs.\\n    /// @dev RISC Zero's Circom verifier circuit takes each of two hash digests in two 128-bit\\n    /// chunks. These values can be derived from the digest by splitting the digest in half and\\n    /// then reversing the bytes of each.\\n    function splitDigest(bytes32 digest) internal pure returns (bytes16, bytes16) {\\n        uint256 reversed = reverseByteOrderUint256(uint256(digest));\\n        return (bytes16(uint128(reversed)), bytes16(uint128(reversed >> 128)));\\n    }\\n\\n    /// @inheritdoc IRiscZeroVerifier\\n    function verify(bytes calldata seal, bytes32 imageId, bytes32 journalDigest) external view {\\n        _verifyIntegrity(seal, ReceiptClaimLib.ok(imageId, journalDigest).digest());\\n    }\\n\\n    /// @inheritdoc IRiscZeroVerifier\\n    function verifyIntegrity(Receipt calldata receipt) external view {\\n        return _verifyIntegrity(receipt.seal, receipt.claimDigest);\\n    }\\n\\n    /// @notice internal implementation of verifyIntegrity, factored to avoid copying calldata bytes to memory.\\n    function _verifyIntegrity(bytes calldata seal, bytes32 claimDigest) internal view {\\n        // Check that the seal has a matching selector. Mismatch generally indicates that the\\n        // prover and this verifier are using different parameters, and so the verification\\n        // will not succeed.\\n        if (SELECTOR != bytes4(seal[:4])) {\\n            revert SelectorMismatch({ received: bytes4(seal[:4]), expected: SELECTOR });\\n        }\\n\\n        // Run the Groth16 verify procedure.\\n        (bytes16 claim0, bytes16 claim1) = splitDigest(claimDigest);\\n        Seal memory decodedSeal = abi.decode(seal[4:], (Seal));\\n        bool verified = this.verifyProof(\\n            decodedSeal.a,\\n            decodedSeal.b,\\n            decodedSeal.c,\\n            [\\n                uint256(uint128(CONTROL_ROOT_0)),\\n                uint256(uint128(CONTROL_ROOT_1)),\\n                uint256(uint128(claim0)),\\n                uint256(uint128(claim1)),\\n                uint256(BN254_CONTROL_ID)\\n            ]\\n        );\\n\\n        // Revert is verification failed.\\n        if (!verified) {\\n            revert VerificationFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e1d96a8156ff3ef653425b52b03ce43c98d5659b0ff58862b0cd1880007c3ab\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiscZeroVerifier.sol\":{\"content\":\"// Copyright 2024 RISC Zero, Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n//\\n// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.9;\\n\\nimport {reverseByteOrderUint32} from \\\"./Util.sol\\\";\\n\\n/// @notice A receipt attesting to the execution of a guest program.\\n/// @dev A receipt contains two parts: a seal and a claim. The seal is a zero-knowledge proof\\n/// attesting to knowledge of a zkVM execution resulting in the claim. The claim is a set of public\\n/// outputs for the execution. Crucially, the claim includes the journal and the image ID. The\\n/// image ID identifies the program that was executed, and the journal is the public data written\\n/// by the program. Note that this struct only contains the claim digest, as can be obtained with\\n/// the `digest()` function on `ReceiptClaimLib`.\\nstruct Receipt {\\n    bytes seal;\\n    bytes32 claimDigest;\\n}\\n\\n/// @notice Public claims about a zkVM guest execution, such as the journal committed to by the guest.\\n/// @dev Also includes important information such as the exit code and the starting and ending system\\n/// state (i.e. the state of memory). `ReceiptClaim` is a \\\"Merkle-ized struct\\\" supporting\\n/// partial openings of the underlying fields from a hash commitment to the full structure.\\nstruct ReceiptClaim {\\n    /// @notice Digest of the SystemState just before execution has begun.\\n    bytes32 preStateDigest;\\n    /// @notice Digest of the SystemState just after execution has completed.\\n    bytes32 postStateDigest;\\n    /// @notice The exit code for the execution.\\n    ExitCode exitCode;\\n    /// @notice A digest of the input to the guest.\\n    /// @dev This field is currently unused and must be set to the zero digest.\\n    bytes32 input;\\n    /// @notice Digest of the Output of the guest, including the journal\\n    /// and assumptions set during execution.\\n    bytes32 output;\\n}\\n\\nlibrary ReceiptClaimLib {\\n    using OutputLib for Output;\\n    using SystemStateLib for SystemState;\\n\\n    bytes32 constant TAG_DIGEST = sha256(\\\"risc0.ReceiptClaim\\\");\\n\\n    // Define a constant to ensure hashing is done at compile time. Can't use the\\n    // SystemStateLib.digest method here because the Solidity compiler complains.\\n    bytes32 private constant SYSTEM_STATE_ZERO_DIGEST = sha256(\\n        abi.encodePacked(\\n            SystemStateLib.TAG_DIGEST,\\n            // down\\n            bytes32(0),\\n            // data\\n            uint32(0),\\n            // down.length\\n            uint16(1) << 8\\n        )\\n    );\\n\\n    /// @notice Construct a ReceiptClaim from the given imageId and journalDigest.\\n    ///         Returned ReceiptClaim will represent a successful execution of the zkVM, running\\n    ///         the program committed by imageId and resulting in the journal specified by\\n    ///         journalDigest.\\n    /// @param imageId The identifier for the guest program.\\n    /// @param journalDigest The SHA-256 digest of the journal bytes.\\n    /// @dev Input hash and postStateDigest are set to all-zeros (i.e. no committed input, or\\n    ///      final memory state), the exit code is (Halted, 0), and there are no assumptions\\n    ///      (i.e. the receipt is unconditional).\\n    function ok(bytes32 imageId, bytes32 journalDigest) internal pure returns (ReceiptClaim memory) {\\n        return ReceiptClaim(\\n            imageId,\\n            SYSTEM_STATE_ZERO_DIGEST,\\n            ExitCode(SystemExitCode.Halted, 0),\\n            bytes32(0),\\n            Output(journalDigest, bytes32(0)).digest()\\n        );\\n    }\\n\\n    function digest(ReceiptClaim memory claim) internal pure returns (bytes32) {\\n        return sha256(\\n            abi.encodePacked(\\n                TAG_DIGEST,\\n                // down\\n                claim.input,\\n                claim.preStateDigest,\\n                claim.postStateDigest,\\n                claim.output,\\n                // data\\n                uint32(claim.exitCode.system) << 24,\\n                uint32(claim.exitCode.user) << 24,\\n                // down.length\\n                uint16(4) << 8\\n            )\\n        );\\n    }\\n}\\n\\n/// @notice Commitment to the memory state and program counter (pc) of the zkVM.\\n/// @dev The \\\"pre\\\" and \\\"post\\\" fields of the ReceiptClaim are digests of the system state at the\\n///      start are stop of execution. Programs are loaded into the zkVM by creating a memory image\\n///      of the loaded program, and creating a system state for initializing the zkVM. This is\\n///      known as the \\\"image ID\\\".\\nstruct SystemState {\\n    /// @notice Program counter.\\n    uint32 pc;\\n    /// @notice Root hash of a merkle tree which confirms the integrity of the memory image.\\n    bytes32 merkle_root;\\n}\\n\\nlibrary SystemStateLib {\\n    bytes32 constant TAG_DIGEST = sha256(\\\"risc0.SystemState\\\");\\n\\n    function digest(SystemState memory state) internal pure returns (bytes32) {\\n        return sha256(\\n            abi.encodePacked(\\n                TAG_DIGEST,\\n                // down\\n                state.merkle_root,\\n                // data\\n                reverseByteOrderUint32(state.pc),\\n                // down.length\\n                uint16(1) << 8\\n            )\\n        );\\n    }\\n}\\n\\n/// @notice Exit condition indicated by the zkVM at the end of the guest execution.\\n/// @dev Exit codes have a \\\"system\\\" part and a \\\"user\\\" part. Semantically, the system part is set to\\n/// indicate the type of exit (e.g. halt, pause, or system split) and is directly controlled by the\\n/// zkVM. The user part is an exit code, similar to exit codes used in Linux, chosen by the guest\\n/// program to indicate additional information (e.g. 0 to indicate success or 1 to indicate an\\n/// error).\\nstruct ExitCode {\\n    SystemExitCode system;\\n    uint8 user;\\n}\\n\\n/// @notice Exit condition indicated by the zkVM at the end of the execution covered by this proof.\\n/// @dev\\n/// `Halted` indicates normal termination of a program with an interior exit code returned from the\\n/// guest program. A halted program cannot be resumed.\\n///\\n/// `Paused` indicates the execution ended in a paused state with an interior exit code set by the\\n/// guest program. A paused program can be resumed such that execution picks up where it left\\n/// of, with the same memory state.\\n///\\n/// `SystemSplit` indicates the execution ended on a host-initiated system split. System split is\\n/// mechanism by which the host can temporarily stop execution of the execution ended in a system\\n/// split has no output and no conclusions can be drawn about whether the program will eventually\\n/// halt. System split is used in continuations to split execution into individually provable segments.\\nenum SystemExitCode {\\n    Halted,\\n    Paused,\\n    SystemSplit\\n}\\n\\n/// @notice Output field in the `ReceiptClaim`, committing to a claimed journal and assumptions list.\\nstruct Output {\\n    /// @notice Digest of the journal committed to by the guest execution.\\n    bytes32 journalDigest;\\n    /// @notice Digest of the ordered list of `ReceiptClaim` digests corresponding to the\\n    /// calls to `env::verify` and `env::verify_integrity`.\\n    /// @dev Verifying the integrity of a `Receipt` corresponding to a `ReceiptClaim` with a\\n    /// non-empty assumptions list does not guarantee unconditionally any of the claims over the\\n    /// guest execution (i.e. if the assumptions list is non-empty, then the journal digest cannot\\n    /// be trusted to correspond to a genuine execution). The claims can be checked by additional\\n    /// verifying a `Receipt` for every digest in the assumptions list.\\n    bytes32 assumptionsDigest;\\n}\\n\\nlibrary OutputLib {\\n    bytes32 constant TAG_DIGEST = sha256(\\\"risc0.Output\\\");\\n\\n    function digest(Output memory output) internal pure returns (bytes32) {\\n        return sha256(\\n            abi.encodePacked(\\n                TAG_DIGEST,\\n                // down\\n                output.journalDigest,\\n                output.assumptionsDigest,\\n                // down.length\\n                uint16(2) << 8\\n            )\\n        );\\n    }\\n}\\n\\n/// @notice Error raised when cryptographic verification of the zero-knowledge proof fails.\\nerror VerificationFailed();\\n\\n/// @notice Verifier interface for RISC Zero receipts of execution.\\ninterface IRiscZeroVerifier {\\n    /// @notice Verify that the given seal is a valid RISC Zero proof of execution with the\\n    ///     given image ID and journal digest. Reverts on failure.\\n    /// @dev This method additionally ensures that the input hash is all-zeros (i.e. no\\n    /// committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the\\n    /// receipt is unconditional).\\n    /// @param seal The encoded cryptographic proof (i.e. SNARK).\\n    /// @param imageId The identifier for the guest program.\\n    /// @param journalDigest The SHA-256 digest of the journal bytes.\\n    function verify(bytes calldata seal, bytes32 imageId, bytes32 journalDigest) external view;\\n\\n    /// @notice Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is\\n    /// valid a cryptographic proof of the execution with the given `claim`. Reverts on failure.\\n    /// @param receipt The receipt to be verified.\\n    function verifyIntegrity(Receipt calldata receipt) external view;\\n}\\n\",\"keccak256\":\"0x19341f62c8fe3c0945ebffa4f25d49706ded741af98eaacb7ade824c947f61a4\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/Util.sol\":{\"content\":\"// Copyright 2024 RISC Zero, Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//     http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n//\\n// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.9;\\n\\n/// @notice reverse the byte order of the uint256 value.\\n/// @dev Solidity uses a big-endian ABI encoding. Reversing the byte order before encoding\\n/// ensure that the encoded value will be little-endian.\\n/// Written by k06a. https://ethereum.stackexchange.com/a/83627\\nfunction reverseByteOrderUint256(uint256 input) pure returns (uint256 v) {\\n    v = input;\\n\\n    // swap bytes\\n    v =\\n        ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n    // swap 2-byte long pairs\\n    v =\\n        ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n    // swap 4-byte long pairs\\n    v =\\n        ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n    // swap 8-byte long pairs\\n    v =\\n        ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n}\\n\\n/// @notice reverse the byte order of the uint32 value.\\n/// @dev Solidity uses a big-endian ABI encoding. Reversing the byte order before encoding\\n/// ensure that the encoded value will be little-endian.\\n/// Written by k06a. https://ethereum.stackexchange.com/a/83627\\nfunction reverseByteOrderUint32(uint32 input) pure returns (uint32 v) {\\n    v = input;\\n\\n    // swap bytes\\n    v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n    // swap 2-byte long pairs\\n    v = (v >> 16) | (v << 16);\\n}\\n\\n/// @notice reverse the byte order of the uint16 value.\\n/// @dev Solidity uses a big-endian ABI encoding. Reversing the byte order before encoding\\n/// ensure that the encoded value will be little-endian.\\n/// Written by k06a. https://ethereum.stackexchange.com/a/83627\\nfunction reverseByteOrderUint16(uint16 input) pure returns (uint16 v) {\\n    v = input;\\n\\n    // swap bytes\\n    v = (v >> 8) | ((v & 0x00FF) << 8);\\n}\\n\",\"keccak256\":\"0x0fb63bef2b8dfdd6b2b29201381c64b1cb6cd27d91e5f173abe6702d7a5e30bc\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200260838038062002608833981016040819052620000359162001101565b6200004082620002d2565b6001600160801b031990811660a0521660805260c08190526040517f72697363302e47726f74683136526563656970745665726966696572506172618152656d657465727360d01b60208201526002908190602601602060405180830381855afa158015620000b3573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620000d8919062001126565b836200022a8460008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b6008827fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c1790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b6010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b6020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c17905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b6040827fffffffffffffffff0000000000000000ffffffffffffffff000000000000000016901c179050608081901b608082901c179050919050565b6200023462000441565b60408051602081019590955284019290925260608301526080820152600360f81b60a082015260a20160408051601f1981840301815290829052620002799162001172565b602060405180830381855afa15801562000297573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620002bc919062001126565b6001600160e01b03191660e052506200121e9050565b60008080620004278460008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b6008827fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c1790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b6010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b6020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c17905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b6040827fffffffffffffffff0000000000000000ffffffffffffffff000000000000000016901c179050608081901b608082901c179050919050565b608081901b956001600160801b0319909116945092505050565b60408051600680825260e082019092526000918291906020820160c08036833701905050905060027f12ac9a25dcd5e1a832a9061a082c15dd1d61aa9c4d553505739d0f5d65dc3be47f025aa744581ebe7ad91731911c898569106ff5a2d30f3eee2b23c60ee980acd4604051602001620004c6929190918252602082015260400190565b60408051601f1981840301815290829052620004e29162001172565b602060405180830381855afa15801562000500573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000525919062001126565b816000815181106200053b576200053b62001187565b60200260200101818152505060027f0707b920bc978c02f292fae2036e057be54294114ccc3c8769d883f688a1423f7f2e32a094b7589554f7bc357bf63481acd2d55555c203383782a4650787ff6642604051602001620005a6929190918252602082015260400190565b60408051601f1981840301815290829052620005c29162001172565b602060405180830381855afa158015620005e0573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000605919062001126565b816001815181106200061b576200061b62001187565b60200260200101818152505060027f0bca36e2cbe6394b3e249751853f961511011c7148e336f4fd974644850fc3477f2ede7c9acf48cf3a3729fa3d68714e2a8435d4fa6db8f7f409c153b1fcdf9b8b60405160200162000686929190918252602082015260400190565b60408051601f1981840301815290829052620006a29162001172565b602060405180830381855afa158015620006c0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620006e5919062001126565b81600281518110620006fb57620006fb62001187565b60200260200101818152505060027f1b8af999dbfbb3927c091cc2aaf201e488cbacc3e2c6b6fb5a25f9112e04f2a77f2b91a26aa92e1b6f5722949f192a81c850d586d81a60157f3e9cf04f679cccd660405160200162000766929190918252602082015260400190565b60408051601f1981840301815290829052620007829162001172565b602060405180830381855afa158015620007a0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620007c5919062001126565b81600381518110620007db57620007db62001187565b60200260200101818152505060027f2b5f494ed674235b8ac1750bdfd5a7615f002d4a1dcefeddd06eda5a076ccd0d7f2fe520ad2020aab9cbba817fcbb9a863b8a76ff88f14f912c5e71665b2ad5e8260405160200162000846929190918252602082015260400190565b60408051601f1981840301815290829052620008629162001172565b602060405180830381855afa15801562000880573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620008a5919062001126565b81600481518110620008bb57620008bb62001187565b60200260200101818152505060027f0f1c3c0d5d9da0fa03666843cde4e82e869ba5252fce3c25d5940320b1c4d4937f214bfcff74f425f6fe8c0d07b307482d8bc8bb2f3608f68287aa01bd0b69e80960405160200162000926929190918252602082015260400190565b60408051601f1981840301815290829052620009429162001172565b602060405180830381855afa15801562000960573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000985919062001126565b816005815181106200099b576200099b62001187565b602002602001018181525050600280604051620009db907f72697363305f67726f746831362e566572696679696e674b65790000000000008152601a0190565b602060405180830381855afa158015620009f9573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000a1e919062001126565b60027f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e27f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660405160200162000a7d929190918252602082015260400190565b60408051601f198184030181529082905262000a999162001172565b602060405180830381855afa15801562000ab7573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000adc919062001126565b604080517f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c60208201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab918101919091527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a760608201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8608082015260029060a00160408051601f198184030181529082905262000b9c9162001172565b602060405180830381855afa15801562000bba573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000bdf919062001126565b604080517f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260208201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed918101919091527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60608201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa608082015260029060a00160408051601f198184030181529082905262000c9f9162001172565b602060405180830381855afa15801562000cbd573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000ce2919062001126565b604080517f03b03cd5effa95ac9bee94f1f5ef907157bda4812ccf0b4c91f42bb629f83a1c60208201527f1aa085ff28179a12d922dba0547057ccaae94b9d69cfaa4e60401fea7f3e0333918101919091527f110c10134f200b19f6490846d518c9aea868366efb7228ca5c91d2940d03076260608201527f1e60f31fcbf757e837e867178318832d0b2d74d59e2fea1c7142df187d3fc6d3608082015260029060a00160408051601f198184030181529082905262000da29162001172565b602060405180830381855afa15801562000dc0573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000de5919062001126565b62000e66600260405162000e1c907f72697363305f67726f746831362e566572696679696e674b65792e49430000008152601d0190565b602060405180830381855afa15801562000e3a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000e5f919062001126565b8862000f01565b6040805160208101979097528601949094526060850192909252608084015260a083015260c0820152600560f81b60e082015260e20160408051601f198184030181529082905262000eb89162001172565b602060405180830381855afa15801562000ed6573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019062000efb919062001126565b91505090565b600080805b835181101562000f665762000f5b8585836001885162000f2791906200119d565b62000f3391906200119d565b8151811062000f465762000f4662001187565b60200260200101518462000f7060201b60201c565b915060010162000f06565b5090505b92915050565b60408051600280825260608201835260009283929190602083019080368337019050509050838160008151811062000fac5762000fac62001187565b602002602001018181525050828160018151811062000fcf5762000fcf62001187565b602090810291909101015262000fe6858262000fef565b95945050505050565b604080516000808252602082019092526200100c84848362001014565b949350505050565b600080620010298451620010c960201b60201c565b9050600060088261ffff16901c60088361ffff16901b1760f01b9050600286868684604051602001620010609493929190620011bf565b60408051601f19818403018152908290526200107c9162001172565b602060405180830381855afa1580156200109a573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620010bf919062001126565b9695505050505050565b600061ffff821115620010fd576040516306dfcc6560e41b8152601060048201526024810183905260440160405180910390fd5b5090565b600080604083850312156200111557600080fd5b505080516020909101519092909150565b6000602082840312156200113957600080fd5b5051919050565b6000815160005b8181101562001163576020818501810151868301520162001147565b50600093019283525090919050565b600062001180828462001140565b9392505050565b634e487b7160e01b600052603260045260246000fd5b8181038181111562000f6a57634e487b7160e01b600052601160045260246000fd5b8481526000602080830186516020880160005b82811015620011f057815184529284019290840190600101620011d2565b505050620011ff818762001140565b6001600160f01b03199590951685525050600290920195945050505050565b60805160a05160c05160e05161138f62001279600039600081816087015281816107df015261084401526000818160e1015261091d01526000818161013901526108e401526000818161017901526108bc015261138f6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806334baeab91161005b57806334baeab9146101115780638989fa2e146101345780639181e4b114610174578063ab750e751461019b57600080fd5b8063053c238d146100825780631599ead5146100c7578063258038e2146100dc575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160e01b031990911681526020015b60405180910390f35b6100da6100d5366004610ee3565b6101ae565b005b6101037f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100be565b61012461011f366004610f36565b6101c8565b60405190151581526020016100be565b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160801b031990911681526020016100be565b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b6100da6101a9366004610f9c565b61079a565b6101c56101bb828061101b565b83602001356107bc565b50565b6000610728565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181106101c5576000805260206000f35b600060405183815284602082015285604082015260408160608360076107d05a03fa915081610233576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080610264576000805260206000f35b5050505050565b7f12ac9a25dcd5e1a832a9061a082c15dd1d61aa9c4d553505739d0f5d65dc3be485527f025aa744581ebe7ad91731911c898569106ff5a2d30f3eee2b23c60ee980acd460208601526000608086018661030887357f2e32a094b7589554f7bc357bf63481acd2d55555c203383782a4650787ff66427f0707b920bc978c02f292fae2036e057be54294114ccc3c8769d883f688a1423f84610200565b61035860208801357f2ede7c9acf48cf3a3729fa3d68714e2a8435d4fa6db8f7f409c153b1fcdf9b8b7f0bca36e2cbe6394b3e249751853f961511011c7148e336f4fd974644850fc34784610200565b6103a860408801357f2b91a26aa92e1b6f5722949f192a81c850d586d81a60157f3e9cf04f679cccd67f1b8af999dbfbb3927c091cc2aaf201e488cbacc3e2c6b6fb5a25f9112e04f2a784610200565b6103f860608801357f2fe520ad2020aab9cbba817fcbb9a863b8a76ff88f14f912c5e71665b2ad5e827f2b5f494ed674235b8ac1750bdfd5a7615f002d4a1dcefeddd06eda5a076ccd0d84610200565b61044860808801357f214bfcff74f425f6fe8c0d07b307482d8bc8bb2f3608f68287aa01bd0b69e8097f0f1c3c0d5d9da0fa03666843cde4e82e869ba5252fce3c25d5940320b1c4d49384610200565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f03b03cd5effa95ac9bee94f1f5ef907157bda4812ccf0b4c91f42bb629f83a1c6102808201527f1aa085ff28179a12d922dba0547057ccaae94b9d69cfaa4e60401fea7f3e03336102a08201527f110c10134f200b19f6490846d518c9aea868366efb7228ca5c91d2940d0307626102c08201527f1e60f31fcbf757e837e867178318832d0b2d74d59e2fea1c7142df187d3fc6d36102e08201526020816103008360086107d05a03fa9051169695505050505050565b604051610380810160405261074060008401356101cf565b61074d60208401356101cf565b61075a60408401356101cf565b61076760608401356101cf565b61077460808401356101cf565b61078160a08401356101cf565b61078e818486888a61026b565b90508060005260206000f35b6107b684846107b16107ac86866109d7565b610b40565b6107bc565b50505050565b6107ca600460008486611069565b6107d391611093565b6001600160e01b0319167f00000000000000000000000000000000000000000000000000000000000000006001600160e01b031916146108775761081b600460008486611069565b61082491611093565b604051632e2ce35360e21b81526001600160e01b031991821660048201527f0000000000000000000000000000000000000000000000000000000000000000909116602482015260440160405180910390fd5b60008061088383610c9f565b909250905060006108978560048189611069565b8101906108a49190611175565b8051602080830151604080850151815160a0810183527f0000000000000000000000000000000000000000000000000000000000000000608090811c82527f0000000000000000000000000000000000000000000000000000000000000000811c9582019590955289851c8184015288851c60608201527f00000000000000000000000000000000000000000000000000000000000000009481019490945290516334baeab960e01b815294955060009430946334baeab99461096d9491939192600401611232565b602060405180830381865afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae91906112d9565b9050806109ce5760405163439cc0cd60e01b815260040160405180910390fd5b50505050505050565b6109df610e9e565b6040518060a00160405280848152602001600280604051610a17907072697363302e53797374656d537461746560781b815260110190565b602060405180830381855afa158015610a34573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610a5791906112fb565b60408051602081019290925260009082018190526060820152600160f81b606482015260660160408051601f1981840301815290829052610a9791611314565b602060405180830381855afa158015610ab4573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610ad791906112fb565b8152602001604051806040016040528060006002811115610afa57610afa611343565b8152602001600060ff1681525081526020016000801b8152602001610b3560405180604001604052808681526020016000801b815250610e06565b905290505b92915050565b6000600280604051610b6a907172697363302e52656365697074436c61696d60701b815260120190565b602060405180830381855afa158015610b87573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610baa91906112fb565b60608401518451602086015160808701516040880151516018906002811115610bd557610bd5611343565b60408a810151602090810151825191820199909952908101969096526060860194909452608085019290925260a084015263ffffffff909116901b60e01b6001600160e01b03191660c082015260f89190911b6001600160f81b03191660c4820152600160fa1b60c882015260ca015b60408051601f1981840301815290829052610c5f91611314565b602060405180830381855afa158015610c7c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610b3a91906112fb565b60008080610dec8460008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b6008827fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c1790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b6010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b6020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c17905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b60408277ffffffffffffffff0000000000000000ffffffffffffffff1916901c179050608081901b608082901c179050919050565b608081901b956001600160801b0319909116945092505050565b6000600280604051610e2a906b1c9a5cd8cc0b93dd5d1c1d5d60a21b8152600c0190565b602060405180830381855afa158015610e47573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610e6a91906112fb565b83516020808601516040805192830194909452928101919091526060810191909152600160f91b6080820152608201610c45565b6040805160a08101825260008082526020820152908101610ecf604080518082019091526000808252602082015290565b815260006020820181905260409091015290565b600060208284031215610ef557600080fd5b813567ffffffffffffffff811115610f0c57600080fd5b820160408185031215610f1e57600080fd5b9392505050565b8060408101831015610b3a57600080fd5b6000806000806101a0808688031215610f4e57600080fd5b610f588787610f25565b945060c0860187811115610f6b57600080fd5b604087019450610f7b8882610f25565b935050868187011115610f8d57600080fd5b50929591945092610100019150565b60008060008060608587031215610fb257600080fd5b843567ffffffffffffffff80821115610fca57600080fd5b818701915087601f830112610fde57600080fd5b813581811115610fed57600080fd5b886020828501011115610fff57600080fd5b6020928301999098509187013596604001359550909350505050565b6000808335601e1984360301811261103257600080fd5b83018035915067ffffffffffffffff82111561104d57600080fd5b60200191503681900382131561106257600080fd5b9250929050565b6000808585111561107957600080fd5b8386111561108657600080fd5b5050820193919092039150565b6001600160e01b031981358181169160048510156110bb5780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156110fc576110fc6110c3565b60405290565b6040805190810167ffffffffffffffff811182821017156110fc576110fc6110c3565b600082601f83011261113657600080fd5b61113e611102565b80604084018581111561115057600080fd5b845b8181101561116a578035845260209384019301611152565b509095945050505050565b6000610100828403121561118857600080fd5b6111906110d9565b61119a8484611125565b8152604084605f8501126111ad57600080fd5b6111b5611102565b8060c08601878111156111c757600080fd5b604087015b818110156111ed576111de8982611125565b845260209093019284016111cc565b508160208601526111fe8882611125565b604086015250929695505050505050565b8060005b60028110156107b6578151845260209384019390910190600101611213565b6101a08101611241828761120f565b60408083018660005b60028082106112595750611294565b82518460005b8381101561127d57825182526020928301929091019060010161125f565b50505092840192506020919091019060010161124a565b505050506112a560c083018561120f565b61010082018360005b60058110156112cd5781518352602092830192909101906001016112ae565b50505095945050505050565b6000602082840312156112eb57600080fd5b81518015158114610f1e57600080fd5b60006020828403121561130d57600080fd5b5051919050565b6000825160005b81811015611335576020818601810151858301520161131b565b506000920191825250919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220cd7f69bea6c220792b1aabe1f146b38a244a3822aa2b2927c1704a739d47a91a64736f6c63430008160033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "verify(bytes,bytes32,bytes32)": {
        "details": "This method additionally ensures that the input hash is all-zeros (i.e. no committed input), the exit code is (Halted, 0), and there are no assumptions (i.e. the receipt is unconditional).",
        "params": {
          "imageId": "The identifier for the guest program.",
          "journalDigest": "The SHA-256 digest of the journal bytes.",
          "seal": "The encoded cryptographic proof (i.e. SNARK)."
        }
      },
      "verifyIntegrity((bytes,bytes32))": {
        "params": {
          "receipt": "The receipt to be verified."
        }
      }
    },
    "stateVariables": {
      "CONTROL_ROOT_0": {
        "details": "This value controls what set of recursion programs (e.g. lift, join, resolve), and therefore what version of the zkVM circuit, will be accepted by this contract. Each instance of this verifier contract will accept a single release of the RISC Zero circuits. New releases of RISC Zero's zkVM require updating these values. These values can be calculated from the [risc0 monorepo][1] using: `cargo xtask bootstrap`. [1]: https://github.com/risc0/risc0"
      },
      "SELECTOR": {
        "details": "The selector is taken from the hash of the verifier parameters including the Groth16      verification key and the control IDs that commit to the RISC Zero circuits. If two      receipts have different selectors (i.e. different verifier parameters), then it can      generally be assumed that they need distinct verifier implementations. This is used as      part of the RISC Zero versioning mechanism.      A selector is not intended to be collision resistant, in that it is possible to find      two preimages that result in the same selector. This is acceptable since it's purpose      to a route a request among a set of trusted verifiers, and to make errors of sending a      receipt to a mismatching verifiers easier to debug. It is analogous to the ABI      function selectors."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "SelectorMismatch(bytes4,bytes4)": [
        {
          "notice": "Error raised when this verifier receives a receipt with a selector that does not match         its own. The selector value is calculated from the verifier parameters, and so this         usually indicates a mismatch between the version of the prover and this verifier."
        }
      ],
      "VerificationFailed()": [
        {
          "notice": "Error raised when cryptographic verification of the zero-knowledge proof fails."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "CONTROL_ROOT_0()": {
        "notice": "Control root hash binding the set of circuits in the RISC Zero system."
      },
      "SELECTOR()": {
        "notice": "A short key attached to the seal to select the correct verifier implementation."
      },
      "verify(bytes,bytes32,bytes32)": {
        "notice": "Verify that the given seal is a valid RISC Zero proof of execution with the     given image ID and journal digest. Reverts on failure."
      },
      "verifyIntegrity((bytes,bytes32))": {
        "notice": "Verify that the given receipt is a valid RISC Zero receipt, ensuring the `seal` is valid a cryptographic proof of the execution with the given `claim`. Reverts on failure."
      }
    },
    "notice": "Groth16 verifier contract for RISC Zero receipts of execution.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}